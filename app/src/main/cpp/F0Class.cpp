/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <dlfcn.h>
#include <android/log.h>
#include <vector>

#include "ics_haptic.h"

extern "C"
JNIEXPORT jobjectArray JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1param_1cali_1run(JNIEnv *env, jobject obj, jstring lraType,
                                                         jobject scanConfig, jobjectArray paramResults) {
    const char *nativeLraType = env->GetStringUTFChars(lraType, NULL);

    jclass scanConfigClass = env->GetObjectClass(scanConfig);
    jfieldID freqStepFieldID = env->GetFieldID(scanConfigClass, "freq_step", "F");
    jfieldID freqWindowFieldID = env->GetFieldID(scanConfigClass, "freq_window", "F");

    jfloat freqStep = env->GetFloatField(scanConfig, freqStepFieldID);
    jfloat freqWindow = env->GetFloatField(scanConfig, freqWindowFieldID);

    struct scan_config config;
    config.freq_step = freqStep;
    config.freq_window = freqWindow;

    jsize paramListLength = env->GetArrayLength(paramResults);
    std::vector<app_sfdc_param> param_list;
    param_list.reserve(paramListLength);
    jint result = sfdc_param_cali_run(nativeLraType, config, param_list);

    jclass sfdcParamClass = env->FindClass("com/blank/demo/bean/SfdcParameter");
    jfieldID resultFieldID = env->GetFieldID(sfdcParamClass, "result", "I");
    jfieldID lraF0FieldID = env->GetFieldID(sfdcParamClass, "lra_f0", "F");
    jfieldID waveFcFieldID = env->GetFieldID(sfdcParamClass, "wave_fc", "F");
    jfieldID avgSlopeFieldID = env->GetFieldID(sfdcParamClass, "avg_slope", "F");
    jfieldID bemfOffsetFieldID = env->GetFieldID(sfdcParamClass, "bemf_offset", "F");

    for (jint i = 0; i < paramListLength; i++) {
        jobject sfdcParamObj = env->GetObjectArrayElement(paramResults, i);
        env->SetIntField(sfdcParamObj, resultFieldID, result);
        env->SetFloatField(sfdcParamObj, lraF0FieldID, param_list[i].lra_f0);
        env->SetFloatField(sfdcParamObj, waveFcFieldID, param_list[i].wave_fc);
        env->SetFloatField(sfdcParamObj, avgSlopeFieldID, param_list[i].avg_slope);
        env->SetFloatField(sfdcParamObj, bemfOffsetFieldID, param_list[i].bemf_offset);
        env->DeleteLocalRef(sfdcParamObj);
    }
    env->ReleaseStringUTFChars(lraType, nativeLraType);
    return paramResults;
}

/*extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1param_1cali_1apply(JNIEnv *env, jobject thiz) {
    jint result = sfdc_param_cali_apply();
    return result;
}*/

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1wave_1add(JNIEnv *env, jobject thiz, jstring wave_name, jshort wave_length, jbyteArray wave_data) {
    // 将 Java 字符串转换为 C++ 字符串
    const char *waveNameStr = env->GetStringUTFChars(wave_name, nullptr);
    // 获取 waveData 的长度
    jsize waveDataLength = env->GetArrayLength(wave_data);
    // 创建 C++ 的 wave_data 对象，并从 Java 数组中获取数据
    std::vector<int8_t> waveDataVec(waveDataLength);
    env->GetByteArrayRegion(wave_data, 0, waveDataLength, reinterpret_cast<jbyte *>(waveDataVec.data()));
    // 调用 C++ 的 sfdc_wave_add 函数
    int32_t result = sfdc_wave_add(waveNameStr, wave_length, waveDataVec);
    // 释放字符串资源
    env->ReleaseStringUTFChars(wave_name, waveNameStr);
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1drift_1apply(JNIEnv *env, jobject thiz, jshort f0_drift) {
    jint result = sfdc_drift_apply(f0_drift);
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1enable(JNIEnv *env, jobject thiz) {
    jint result = sfdc_enable();
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1disable(JNIEnv *env, jobject thiz) {
    jint result = sfdc_disable();
    return result;
}

extern "C"
JNIEXPORT jobject JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1wave_1play(JNIEnv *env, jobject thiz, jobject record) {
    jclass resClass = env->FindClass("com/blank/demo/bean/PlayRecord");

    jfieldID resultFieldID = env->GetFieldID(resClass, "result", "I");
    jfieldID waveIndexFieldID = env->GetFieldID(resClass, "wave_index", "S");
    jfieldID temperatureFieldID = env->GetFieldID(resClass, "temperature", "F");
    jfieldID outputF0FieldID = env->GetFieldID(resClass, "output_f0", "F");
    jfieldID relativeBemfFieldID = env->GetFieldID(resClass, "relative_bemf", "F");

    jshort waveIndex = env->GetShortField(record, waveIndexFieldID);
    struct play_record playRecord;
    playRecord.wave_index = waveIndex;
    jint result = sfdc_wave_play(playRecord);

    jobject resObj = env->AllocObject(resClass);
    env->SetIntField(resObj, resultFieldID, result);
    env->SetShortField(resObj, waveIndexFieldID, waveIndex);
    env->SetFloatField(resObj, temperatureFieldID, playRecord.temperature);
    env->SetFloatField(resObj, outputF0FieldID, playRecord.output_f0);
    env->SetFloatField(resObj, relativeBemfFieldID, playRecord.relative_bemf);
    return resObj;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1tc_1add(JNIEnv *env, jobject thiz, jobject config) {
    jclass configClass = env->GetObjectClass(config);
    // 获取字段 ID
    jfieldID tcNameField = env->GetFieldID(configClass, "tc_name", "Ljava/lang/String;");
    jfieldID validWaveCountField = env->GetFieldID(configClass, "valid_wave_count", "S");
    jfieldID waveConfigField = env->GetFieldID(configClass, "wave_config", "[Lcom/blank/demo/bean/TcWaveConfig;");
    jfieldID repeatLoopField = env->GetFieldID(configClass, "repeat_loop", "S");
    jfieldID recordIntervalField = env->GetFieldID(configClass, "record_interval", "S");
    // 获取字段值
    jstring tcNameString = static_cast<jstring>(env->GetObjectField(config, tcNameField));
    jshort validWaveCount = env->GetShortField(config, validWaveCountField);
    jobjectArray waveConfigArray = static_cast<jobjectArray>(env->GetObjectField(config, waveConfigField));
    jshort repeatLoop = env->GetShortField(config, repeatLoopField);
    jshort recordInterval = env->GetShortField(config, recordIntervalField);
    // 将 Java 字符串转为 C 字符串
    const char *tcName = env->GetStringUTFChars(tcNameString, NULL);
    // 创建 C 结构体并赋值
    struct tc_config cConfig;
    strncpy(cConfig.tc_name, tcName, sizeof(cConfig.tc_name));
    cConfig.valid_wave_count = validWaveCount;
    cConfig.repeat_loop = repeatLoop;
    cConfig.record_interval = recordInterval;
    // 获取 wave_config 字段的数组长度
    jsize waveConfigArrayLength = env->GetArrayLength(waveConfigArray);
    jsize maxWaveConfigs = sizeof(cConfig.wave_config) / sizeof(cConfig.wave_config[0]);
    jsize numWaveConfigs = waveConfigArrayLength > maxWaveConfigs ? maxWaveConfigs : waveConfigArrayLength;
    for (jsize i = 0; i < numWaveConfigs; i++) {
        jobject javaWaveConfig = env->GetObjectArrayElement(waveConfigArray, i);
        jclass waveConfigClass = env->GetObjectClass(javaWaveConfig);
        // 获取字段 ID
        jfieldID waveIndexField = env->GetFieldID(waveConfigClass, "wave_index", "S");
        jfieldID f0DriftField = env->GetFieldID(waveConfigClass, "f0_drift", "S");
        jfieldID playbackCountField = env->GetFieldID(waveConfigClass, "playback_count", "S");
        jfieldID playbackIntervalField = env->GetFieldID(waveConfigClass, "playback_interval", "F");
        // 获取字段值
        jshort waveIndex = env->GetShortField(javaWaveConfig, waveIndexField);
        jshort f0Drift = env->GetShortField(javaWaveConfig, f0DriftField);
        jshort playbackCount = env->GetShortField(javaWaveConfig, playbackCountField);
        jfloat playbackInterval = env->GetFloatField(javaWaveConfig, playbackIntervalField);
        // 赋值给 C 结构体的对应成员变量
        cConfig.wave_config[i].wave_index = waveIndex;
        cConfig.wave_config[i].f0_drift = f0Drift;
        cConfig.wave_config[i].playback_count = playbackCount;
        cConfig.wave_config[i].playback_interval = playbackInterval;
        // 释放内存
        env->DeleteLocalRef(javaWaveConfig);
        env->DeleteLocalRef(waveConfigClass);
    }
    jint result = sfdc_tc_add(cConfig);
    // 释放字符串资源
    env->ReleaseStringUTFChars(tcNameString, tcName);
    // 删除本地引用
    env->DeleteLocalRef(tcNameString);
    env->DeleteLocalRef(waveConfigArray);
    env->DeleteLocalRef(configClass);
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1tc_1edit(JNIEnv *env, jobject thiz, jobject config) {
    jclass configClass = env->GetObjectClass(config);
    // 获取字段 ID
    jfieldID tcNameField = env->GetFieldID(configClass, "tc_name", "Ljava/lang/String;");
    jfieldID validWaveCountField = env->GetFieldID(configClass, "valid_wave_count", "S");
    jfieldID waveConfigField = env->GetFieldID(configClass, "wave_config", "[Lcom/blank/demo/bean/TcWaveConfig;");
    jfieldID repeatLoopField = env->GetFieldID(configClass, "repeat_loop", "S");
    jfieldID recordIntervalField = env->GetFieldID(configClass, "record_interval", "S");
    // 获取字段值
    jstring tcNameString = static_cast<jstring>(env->GetObjectField(config, tcNameField));
    jshort validWaveCount = env->GetShortField(config, validWaveCountField);
    jobjectArray waveConfigArray = static_cast<jobjectArray>(env->GetObjectField(config, waveConfigField));
    jshort repeatLoop = env->GetShortField(config, repeatLoopField);
    jshort recordInterval = env->GetShortField(config, recordIntervalField);
    // 将 Java 字符串转为 C 字符串
    const char *tcName = env->GetStringUTFChars(tcNameString, NULL);
    // 创建 C 结构体并赋值
    struct tc_config cConfig;
    strncpy(cConfig.tc_name, tcName, sizeof(cConfig.tc_name));
    cConfig.valid_wave_count = validWaveCount;
    cConfig.repeat_loop = repeatLoop;
    cConfig.record_interval = recordInterval;
    // 获取 wave_config 字段的数组长度
    jsize waveConfigArrayLength = env->GetArrayLength(waveConfigArray);
    jsize maxWaveConfigs = sizeof(cConfig.wave_config) / sizeof(cConfig.wave_config[0]);
    jsize numWaveConfigs = waveConfigArrayLength > maxWaveConfigs ? maxWaveConfigs : waveConfigArrayLength;
    for (jsize i = 0; i < numWaveConfigs; i++) {
        jobject javaWaveConfig = env->GetObjectArrayElement(waveConfigArray, i);
        jclass waveConfigClass = env->GetObjectClass(javaWaveConfig);
        // 获取字段 ID
        jfieldID waveIndexField = env->GetFieldID(waveConfigClass, "wave_index", "S");
        jfieldID f0DriftField = env->GetFieldID(waveConfigClass, "f0_drift", "S");
        jfieldID playbackCountField = env->GetFieldID(waveConfigClass, "playback_count", "S");
        jfieldID playbackIntervalField = env->GetFieldID(waveConfigClass, "playback_interval", "F");
        // 获取字段值
        jshort waveIndex = env->GetShortField(javaWaveConfig, waveIndexField);
        jshort f0Drift = env->GetShortField(javaWaveConfig, f0DriftField);
        jshort playbackCount = env->GetShortField(javaWaveConfig, playbackCountField);
        jfloat playbackInterval = env->GetFloatField(javaWaveConfig, playbackIntervalField);
        // 赋值给 C 结构体的对应成员变量
        cConfig.wave_config[i].wave_index = waveIndex;
        cConfig.wave_config[i].f0_drift = f0Drift;
        cConfig.wave_config[i].playback_count = playbackCount;
        cConfig.wave_config[i].playback_interval = playbackInterval;

        env->DeleteLocalRef(javaWaveConfig);
        env->DeleteLocalRef(waveConfigClass);
    }
    jint result = sfdc_tc_edit(cConfig);
    env->ReleaseStringUTFChars(tcNameString, tcName);
    env->DeleteLocalRef(tcNameString);
    env->DeleteLocalRef(waveConfigArray);
    env->DeleteLocalRef(configClass);
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1tc_1delete(JNIEnv *env, jobject thiz, jstring testCaseName) {
    const char *tc_name = env->GetStringUTFChars(testCaseName, NULL);
    char *name = strdup(tc_name);
    jint result = sfdc_tc_delete(name);
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1wave_1clear(JNIEnv *env, jobject thiz) {
    jint result = sfdc_wave_clear();
    return result;
}

/*int32_t sfdc_tc_execute(const char *tc_name, struct tc_record *record, uint16_t size) {
    // 假设返回的play_times为2
    record->play_times = 2;
    // 动态分配存储play_records的内存
    struct play_record *play_records = (struct play_record *) malloc(record->play_times * sizeof(struct play_record));
    for (int i = 0; i < size; ++i) {
        play_records[i].wave_index = i;
        play_records[i].temperature = i + 1;
        play_records[i].output_f0 = i + 2;
        play_records[i].relative_bemf = i + 3;
    }
    // 将play_record_list指针指向动态分配的内存
    record->play_record_list = play_records;
    return 1;
}*/

extern "C"
JNIEXPORT jobject JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1tc_1execute(JNIEnv *env, jobject thiz, jstring record_path, jstring tcName, jobject recordObject,
                                                    jint waveSize) {
    const char *tc_name = env->GetStringUTFChars(tcName, NULL);
    char *name = strdup(tc_name);
    const char *recordPath = env->GetStringUTFChars(record_path, NULL);
    char *path = strdup(recordPath);

    std::vector<play_record> play_record_list;
    play_record_list.reserve(waveSize);
    jint result = sfdc_tc_excute(path, name, play_record_list);
    jclass recordClass = env->GetObjectClass(recordObject);
    jfieldID resultField = env->GetFieldID(recordClass, "result", "I");
    jfieldID playRecordListField = env->GetFieldID(recordClass, "play_record_list", "Ljava/util/ArrayList;");
    jclass playRecordClass = env->FindClass("com/blank/demo/bean/PlayRecord");
    jobjectArray playRecordArray = env->NewObjectArray(waveSize, playRecordClass, NULL);
    for (int i = 0; i < waveSize; ++i) {
        jobject playRecordObject = env->NewObject(playRecordClass, env->GetMethodID(playRecordClass, "<init>", "()V"));
        jfieldID waveIndexField = env->GetFieldID(playRecordClass, "wave_index", "S");
        jfieldID temperatureField = env->GetFieldID(playRecordClass, "temperature", "F");
        jfieldID outputF0Field = env->GetFieldID(playRecordClass, "output_f0", "F");
        jfieldID relativeBemfField = env->GetFieldID(playRecordClass, "relative_bemf", "F");
        // 设置PlayRecord对象的字段值
        env->SetShortField(playRecordObject, waveIndexField, play_record_list[i].wave_index);
        env->SetFloatField(playRecordObject, temperatureField, play_record_list[i].temperature);
        env->SetFloatField(playRecordObject, outputF0Field, play_record_list[i].output_f0);
        env->SetFloatField(playRecordObject, relativeBemfField, play_record_list[i].relative_bemf);
        // 将PlayRecord对象添加到数组中
        env->SetObjectArrayElement(playRecordArray, i, playRecordObject);
        // 释放PlayRecord对象的引用
        env->DeleteLocalRef(playRecordObject);
    }
    // 获取ArrayList类的引用
    jclass arrayListClass = env->FindClass("java/util/ArrayList");
    jmethodID arrayListCtor = env->GetMethodID(arrayListClass, "<init>", "()V");
    jmethodID arrayListAdd = env->GetMethodID(arrayListClass, "add", "(Ljava/lang/Object;)Z");
    // 创建一个新的ArrayList对象
    jobject arrayListObj = env->NewObject(arrayListClass, arrayListCtor);
    // 获取jobjectArray的长度
    jsize length = env->GetArrayLength(playRecordArray);
    // 遍历jobjectArray，将每个元素添加到ArrayList中
    for (jsize i = 0; i < length; ++i) {
        jobject element = env->GetObjectArrayElement(playRecordArray, i);
        env->CallBooleanMethod(arrayListObj, arrayListAdd, element);
        env->DeleteLocalRef(element);
    }
    env->DeleteLocalRef(arrayListClass);
    // 设置playRecordList字段的值
    env->SetObjectField(recordObject, playRecordListField, arrayListObj);
    env->SetIntField(recordObject, resultField, result);
    env->DeleteLocalRef(playRecordArray);
    env->DeleteLocalRef(playRecordClass);
    env->ReleaseStringUTFChars(tcName, tc_name);
    env->ReleaseStringUTFChars(tcName, recordPath);
    return recordObject;
}

extern "C"
JNIEXPORT jfloat JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1get_1continuous_1f0(JNIEnv *env, jobject thiz) {
    jfloat result = sfdc_get_continuous_f0();
    return result;
}

extern "C"
JNIEXPORT jint JNICALL
Java_com_blank_demo_utils_F0Class_sfdc_1long_1waveform_1playback(JNIEnv *env, jobject thiz,jstring wave_name) {
    const char *waveNameStr = env->GetStringUTFChars(wave_name, nullptr);
    int32_t result = long_wave_play(waveNameStr);
    env->ReleaseStringUTFChars(wave_name, waveNameStr);
    return result;
}